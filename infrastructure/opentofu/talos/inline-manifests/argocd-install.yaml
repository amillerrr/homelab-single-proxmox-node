---
apiVersion: v1
kind: Namespace
metadata:
  name: argocd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argocd-bootstrap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: argocd-bootstrap
    namespace: argocd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-bootstrap
  namespace: argocd
---
apiVersion: batch/v1
kind: Job
metadata:
  name: argocd-bootstrap
  namespace: argocd
spec:
  backoffLimit: 10
  template:
    metadata:
      labels:
        app: argocd-bootstrap
    spec:
      restartPolicy: OnFailure
      serviceAccountName: argocd-bootstrap
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/control-plane
                    operator: Exists
      containers:
        - name: argocd-bootstrap
          image: alpine/k8s:1.29.2
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          command:
            - sh
            - -c
            - |
              set -e
              echo "Installing ArgoCD via Kustomize..."
              
              # Wait for API server
              until kubectl get nodes; do
                echo "Waiting for API server..."
                sleep 5
              done

              echo "Waiting for DNS..."
              until nslookup kubernetes.default.svc.cluster.local >/dev/null 2>&1; do
                echo "DNS not ready, waiting..."
                sleep 5
              done
              
              # Clone repo or use embedded manifests
              # For now, apply from URL
              kubectl apply -k https://github.com/amillerrr/homelab-single-proxmox-node/clusters/production/base/argocd?ref=main
              
              echo "Waiting for ArgoCD deployments..."
              kubectl wait --for=condition=available --timeout=600s \
                deployment/argocd-server -n argocd || {
                  echo "Warning: argocd-server deployment not ready within timeout"
                  kubectl get pods -n argocd
                }
              
              kubectl wait --for=condition=available --timeout=600s \
                deployment/argocd-repo-server -n argocd || {
                  echo "Warning: argocd-repo-server deployment not ready within timeout"
                }
              
              kubectl wait --for=condition=available --timeout=600s \
                deployment/argocd-applicationset-controller -n argocd || {
                  echo "Warning: argocd-applicationset-controller deployment not ready within timeout"
                }

              echo "ArgoCD components ready"
              
              echo "Applying ApplicationSet"
              cat <<EOF | kubectl apply -f -
              apiVersion: argoproj.io/v1alpha1
              kind: ApplicationSet
              metadata:
                name: cluster-components
                namespace: argocd
              spec:
                goTemplate: true
                goTemplateOptions: ["missingkey=error"]
                generators:
                  - list:
                      elements:
                        - name: sealed-secrets
                          path: base/sealed-secrets
                          namespace: sealed-secrets
                          wave: "1"
                          prune: true
                        
                        - name: cert-manager
                          path: base/cert-manager
                          namespace: cert-manager
                          wave: "2"
                          prune: true
                        
                        - name: cert-manager-config
                          path: overlays/production/cert-manager
                          namespace: cert-manager
                          wave: "3"
                          prune: true
                        
                        - name: gateway
                          path: base/gateway
                          namespace: gateway
                          wave: "4"
                          prune: true
                        
                        - name: cilium-config
                          path: network/cilium
                          namespace: kube-system
                          wave: "5"
                          prune: false
                        
                        - name: routes
                          path: network/routes
                          namespace: default
                          wave: "6"
                          prune: true
                
                template:
                  metadata:
                    name: '{{.name}}'
                    namespace: argocd
                    annotations:
                      argocd.argoproj.io/sync-wave: '{{.wave}}'
                    finalizers:
                      - resources-finalizer.argocd.argoproj.io
                  spec:
                    project: default
                    source:
                      repoURL: https://github.com/amillerrr/homelab-single-proxmox-node.git
                      targetRevision: main
                      path: 'clusters/production/{{.path}}'
                    destination:
                      server: https://kubernetes.default.svc
                      namespace: '{{.namespace}}'
                    syncPolicy:
                      automated:
                        prune: {{.prune}}
                        selfHeal: true
                        allowEmpty: false
                      syncOptions:
                        - CreateNamespace=true
                        - ServerSideApply=true
                      retry:
                        limit: 5
                        backoff:
                          duration: 5s
                          factor: 2
                          maxDuration: 3m
                    ignoreDifferences:
                      - group: apps
                        kind: Deployment
                        jsonPointers:
                          - /spec/replicas
              EOF
              
              echo "ApplicationSet deployed"
