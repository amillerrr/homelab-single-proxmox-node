---
apiVersion: v1
kind: Namespace
metadata:
  name: argocd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argocd-bootstrap
rules:
  # Namespace management
  - apiGroups: [""]
    resources: [namespaces]
    verbs: [get, list, create, update, patch]
  
  # Core resources
  - apiGroups: [""]
    resources: [configmaps, services, serviceaccounts, secrets]
    verbs: [get, list, create, update, patch]
  
  # Workload resources
  - apiGroups: [apps]
    resources: [deployments, statefulsets, replicasets]
    verbs: [get, list, create, update, patch, watch]
  
  # RBAC
  - apiGroups: [rbac.authorization.k8s.io]
    resources: [roles, rolebindings, clusterroles, clusterrolebindings]
    verbs: [get, list, create, update, patch]
  
  # ArgoCD CRDs
  - apiGroups: [argoproj.io]
    resources: [applications, applicationsets, appprojects]
    verbs: ["*"]
  
  # Networking
  - apiGroups: [""]
    resources: [endpoints]
    verbs: [get, list]
  - apiGroups: [networking.k8s.io]
    resources: [networkpolicies, ingresses]
    verbs: [get, list, create, update, patch]
  
  # CustomResourceDefinitions
  - apiGroups: [apiextensions.k8s.io]
    resources: [customresourcedefinitions]
    verbs: [get, list, create, update, patch]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argocd-bootstrap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argocd-bootstrap
subjects:
  - kind: ServiceAccount
    name: argocd-bootstrap
    namespace: argocd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-bootstrap
  namespace: argocd
---
apiVersion: batch/v1
kind: Job
metadata:
  name: argocd-bootstrap
  namespace: argocd
spec:
  backoffLimit: 10
  template:
    metadata:
      labels:
        app: argocd-bootstrap
    spec:
      restartPolicy: OnFailure
      serviceAccountName: argocd-bootstrap
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        fsGroup: 65532
        seccompProfile:
          type: RuntimeDefault
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/control-plane
                    operator: Exists
      containers:
        - name: argocd-bootstrap
          image: alpine/k8s:1.31.3
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65532
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
            readOnlyRootFilesystem: true
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 256Mi
          command:
            - sh
            - -c
            - |
              set -e
              echo "Installing ArgoCD via Kustomize"
              
              # Wait for API server
              until kubectl get nodes; do
                echo "Waiting for API server"
                sleep 5
              done

              echo "Waiting for DNS"
              until nslookup kubernetes.default.svc.cluster.local >/dev/null 2>&1; do
                echo "DNS not ready, waiting..."
                sleep 5
              done
              
              # Apply ArgoCD from Git
              echo "Applying ArgoCD manifests"
              kubectl apply -k https://github.com/amillerrr/homelab-single-proxmox-node/clusters/production/infrastructure/argocd?ref=main
              
              echo "Waiting for ArgoCD deployments..."
              kubectl wait --for=condition=available --timeout=600s \
                deployment/argocd-server -n argocd || {
                  echo "Warning: argocd-server deployment not ready within timeout"
                  kubectl get pods -n argocd
                }
              
              kubectl wait --for=condition=available --timeout=600s \
                deployment/argocd-repo-server -n argocd || {
                  echo "Warning: argocd-repo-server deployment not ready within timeout"
                }
              
              kubectl wait --for=condition=available --timeout=600s \
                deployment/argocd-applicationset-controller -n argocd || {
                  echo "Warning: argocd-applicationset-controller deployment not ready within timeout"
                }

              echo "ArgoCD components ready"
              
              echo "Applying ApplicationSet"
              kubectl apply -f https://raw.githubusercontent.com/amillerrr/homelab-single-proxmox-node/main/clusters/production/bootstrap/applicationset.yaml
              
              echo "ApplicationSet deployed"
